//////////////////// Section 1 Getting Started////////////////////////
a. React is all about single page applications. 
b. 

//////////////////// Section 2 JS refresher ////////////////////////
a. Arrow functions take the invocation context outside of the equation when using "this"
b. Classes dont need the super() in the constructor like they used to 
    - class Human {
        gender = "male";

        printGender = () => {
            console.log(this.gender);
        }
    }
c. Spread and Rest
    - Spread: spreads array or object into other array or object
     i. const newArr = [...oldArr, 1, 2]
     ii. const newObj = {..oldObj, newThing: value, newerThing: value}
    - Rest: Spread a list of function arguements into and array
     i. function sortArgs(...args) {
         return args.sort();
     }
d. Destructuring
    - const [arrayThing, otherThing] = arrayOfThings;
    - const {objectThing, otherThing} = objectWithThings;

e. Array functions
    - filter, map, find, findIndex, reduce, concat, slice, splice, 
//////////////////// Section 3 React Basics ////////////////////////
a. react is written in a declarative way. We state the end goal for what stuff should
    look like, and react works it out. 
b. vanilla Js is written in an imperative way. We give step by step instructions for how 
    we want things to turn out. 
c. create a new project with npx create-react-app <appname>
d. components are returned JSX code
    - const comp = (props) => {
        return (
            <div>
                <p>I am Component!</p>
            <div>
        ) 
    }
e. props are passed down to JSX components from their parent. These look like attributes
    - <ParentComponent>
        <Component prop1={afunctionorvalue}></Component>
      </ParentComponent>

//////////////////// Section 4 React State and Events ////////////////////////
a. Listening to events is built into React components. Each component can have "onEvent" attributes added to them
    - <Component onClick={someFunctionHandler} />
b. React relies heavily on "state". A component wont re-render unless some "state" is changed.
c. To use state, you need to import it from react, and destructure out two items, the states current value, and the function that updates that value
    - const [currentVal, setCurrentVal] = useState("bool, string, object, arr, etc.."), you can call that update the value for any reason, not just user events. Http requests, setTimeout, etc..
d. If a parent component is rea-evaluated, all the child components are called again as well. 
e. Two way binding is important.
    - adding a value attribute on an input for example, and setting it to a piece of state, allows us to set it back to whatever we want after that state updates.
f. Lifting information up through components works like event bubbling in JS. 
    - Pass an event handler from a parent component to a child component
    - call that handler in the child component and pass in the data you want to pass up.
    - Repeat this all the way up the chain
    - this is called "lifting the state"

//////////////////// Section 5 Rendering Lists and Conditional Content ////////////////////////
a. You can conditionally render content in a few ways
    - Using {} to add expressions directly in your JSX code
        i. 
        import item from './item.js'

        const thing = () = {
        let items = [item1, item2]
        const addItemHandler = (item) => {
            return items.push(item)
        }

        return(
            <Component>
                {items.map((item => return <Item><p>`${item.name}`</p></Item))}
            </Component>
        )
            
        }
    - Defining content in the JS above the JSX, and then putting in the JSX in curly braces
        ii. 
        import item from './item.js'

        const thing = () = {
        let items = [item1, item2]
        const addItemHandler = (item) => {
            return items.push(item)
        }

        const itemList = (items) => {
            items.map((item => return <Item><p>`${item.name}`</p></Item))
        }

        return(
            <Component>
                {itemList}
            </Component>
        )
            
        }
    - Using Ternary Operators to apply text, components, or styles
      iii.
      {if(!isValid) && <Component/} 
      {if(isValue && <OtherComponent/>)}
      {items.length === 0 ? <p>No Items</p> : <Component>{itemList}<Component/>}
    - Checking for content in your Js above your component, and returning early with a seperate component if a condition is not met.
    - whenever you are making a list, make sure your objects have an id. That Id needs to be placed as a "key"
        attribute on your JSX element when you render the content so react can intuitively re-render that content
            if it is updated
            
//////////////////// Section 6 Styles ////////////////////////
a. You can add dynamic styles on components with inline styles or Classes
    - <Component style={{
        backgroundColor: !isValid ? "red : "white",
        borderColor: !isValid ? "red" : "blue"
    }}/>
    - <Component className={`form-control ${isValid ? 'invalid' : ""}`} />
b. You can also use the "styled-components" npm package. 
    - import styled from "styled-components"
    - const Button = styled.whateverelement`stylesgohere`
c. In the styles you pass into the backticks, you can use a prop on the component being styled, 
    and then use that prop to set styles dynamically based on its value.
d. CSS Modules
    - import styles from "./Button.module.css";
    - Name your css files "Component.module.css"
    - you now have access to your classes as properties on "styles"
        - <Component className={styles.className}/>
        - <Component className={styles[class-name]}/>
    - You can add dynamic styles like this:
        - <Component className={`${styles["form-control"]} ${!isValid && styles.invalid}`}/>
    - Media Queries work as normal (Try to make queries for bigger screens not smaller ones)
e. Your custom elements dont know what className or other built in attributes are. 
    - if you want to pass a class from a custom component down to is children, you do so
        by accessing that className prop from the parent on the children.

//////////////////// Section 8 addusers project////////////////////////
1. When you create a custom component like a button, rather than adding the onClick on the 
    JSX <button></button> within the component, you can add it on the parent custom made <Button></Button> as props.
    This allows you to have custom buttons, but pass in different handlers, types, etc
    based on where you are using them. You simplly set the <button> attributes to be prop values
    in your custom <Button></Button> component.



//////////////////// Section 9 Fragments Portals and Refs ////////////////////////
1. JSX code can only return one "root" html element. Two elements cannot be returned side
    by side. 
    - This makes sense, because in JS you cant return more than one thing either.
    - To work around this, you can wrap everything in one element.
    - You can also make what you return an array of elements. However if you do this, react wants a key on 
        each element, just like it does when you dynamically render lists of data as elements.  
2. The ideal solution to the above is to use a wrapper component.
    - The wrapper component can just return props.children, or, any elements nested inside
        the wrapper.
    - SUPRISE! This is actually already built for you as <React.Fragment></React.Fragment>
        - some projects can support <></> as <React.Fragment></React.Fragment>
    - We can now avoid using a bunch of uneccessary div.
3. Portals. Because modals are overlays for the entire page, you dont want them nested
    inside a bunch of elements.
    - We can use portals to render HTML outside of the component we are rendering.
4. To use a portal
    - create an element in index.html with the id you want to render the component in
    - call ReactDom.createPortal(<Component/>, document.getElementId("someid"));
5. "refs"
    - You can set a connection to an HTML element and other js code
    - const thing = useRef(), and then setting ref={thing} on an element connects them
        - the value of "thing" is the actual element itslef at first
        - you can access an elements value with: element.current.value
        - this can eliminate the need to use state to keep track of values in some cases.
6. When you access a compenets value but you arent using react to determine that value 
    like with state or something similar, these are called uncontrolled components. 
    - most often this happens with input components. 


//////////////////// Section 10 useEffect, useReducer, and the context API ////////////////////////
1. useEffect is for "side-effects", or anything that is not rendering a ui or reacting to user input.
2. useEffect takes in two arguments:
    a. Callback function
    b. array of dependencies, the callback only runs if the dependencies change
       - without the second argument, it runs everytime the state updates
       - with an empty array as the second argument, the effect only runs once on mount
3. Generally, the depencies are what you are using in your side effect function
4. Remember, useEffect can be used for anything that is a sideeffect of something else happening within
    a component.
5. Sometimes you need to "cleanup" after re-render. For example, if you add an eventlistener
    in useEffect, you dont want to add an eventListener EVERY time a depency changes.
6. You can "return" a function in useEffect to clean up the results from the last time it reason
    - if you added an even listener, and the same thing happens again, your returned
        function that gets rid of the eventlister will run first. This avoids 50 event
        listeners being added to the same thing.

1. useReducer is a more complex version of useState()
2. It is good to use when you have state updates that belong together, or you have
    state updates that depend on other state updates.
3. const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);
    - reducerFn(prevState, action) <- action is the entire object you pass into your dispatch function
    - initialState - the initial state that was set
    - initFn - function to set the initial state programmatically (Like an http req)
4. All use reducer really does is allow you to turn state into an object rather
    than a value. 
    - you then pass another object as an action
    - you then return your new state. You can access the old state and the new action object
        in the process. 
    If you use useEffect with useReducer, make sure you depencies dont lead
    to uneccessary effect execution. 

1. Create a context object file within your source folder
2. React.createContext({yourcontextkeyvalues})
3. You then have to import and wrap any component that will need access to this context
4. <AuthContext.Provider> wrapping gives all component children the context
5. For components who want to use the provider, you can wrap them in a consumer
5. <AuthContext.Consumer> has a child that is a function. 
 - The function takes in the context as an argument, and should return your JSX that
    needs to use the context.
 - You can now access the context properties. ctx.property

1. Most of the time we will use the useContext hook. 
2. const ctx = useContext(AuthContext) <--- Still need to import your context
3. in your context provider, you can also pass down functions. 
4. Remember, you only do this when you are forwarding value/functions through components. 
    - If you are going to to use the value/function in a direct child, go ahead and use props Still

1. When you pass functions, you dont have to declare them on the context instantiation object
    itself. You can throw the key in, and put a dummy function in its place. You can 
    then make the function in a component, and pass it into the Context.Provider as a value.

1. React Context is not optimized for high frequency changes. 
2. The Rules of React Hooks
    - You can only call hooks in react functions. Compenent functions, and custom hooks.
    - You can only call hooks at the top level of your react function
        - Dont call them in nested functions
        - dont call them in block statements
3. useEffect(), everything used in useEffect needs to be added as a dependency.

1. useImperativeHandle
 -  Custom components cannot use refs.
 -  useImperativeHandle takes in , and a function that returns an object. This
    object has key value pairs that can make functions accessible to custom compenents.
 - You will have to pass a ref on your custom compenent, and pass that to the
    useImperativeHandle(ref, function that returns object)
 - If you want to do this on a custom component, you need to wrap it in
   React.forwardRef
 - now you have a ref on your reusuable component and can access the functions
    you returned in useImperativeHandle.

//////////////////// Section 12 How React Works ////////////////////////
 - Just because a comonent re-renders, does mean the dom re-renders. React on re-renders a targeted dom element. 
 - Wherever the state that is managed changes is where the re-render starts. Everything under the tree after that component will 
    also re-render.

1. You can use React.memo(Component) when you export your component.
2. this tells react to look at the props the component recieves, and the component will only re-render if those 
    props have changed. 
    - this comparision has a performance cost as well, so only use it for complex components or if a component has many child components that dont change. 
3. If you passing a function from a parent component to a child component, when the parent re-renders, that fuction is recreated
    This technically means the child's props are different, because functions are objects, and objects a reference data types, 
    and it will re-render even if wrapped in React.memo();
4. However, you can prevent this function recreation with useCallback();
    useCallback sets the object's reference equal to each other. This prevents this function from being recreated, because react
    knows to just re-use that reference from the previous render. useCallback(() => myfunctionthingy).
    - Just like useEffect, useCallback() takes in an array for a second param that tells react when to recreate the function. 
    - Anything you use within your function should be included in the depencies array.

1. React "schedules" state changes until everything except the state changes are done, then it updates all the states
    in the order you called them in and re-renders. 
2. if you do change multiple states before a re-render react "batches" states. It will update all of the states at once in one continuous function. 
3. You can memoize SPECIFIC peices of code with useMemo();
    - Sorting for example is really intensive. If you wanted to re-render a components title or color, 
        but not re-sort a list stored in the compent for example:
    - useMemo(() => {
        sorting function
    }, [dependencies])

/////////////////////////// Section 13 Class based components //////////////////////////
1. class Product extends Component {
    render() {
        return <h2>A Product goes here</h2>
    }
}

2. Use state by calling a constructor and initializing your default state:
 - class Product extends Component {
     constructor() {
         super();
         this.state = {price: 1}
     }

     clickHandler() {
         this.setState((curState) => {
             return {price: 2}
         })
     }

     render(){
         return (
             <button onclick(this.clickHandler.bind(this))>Change Price</button>
         )
     }
 }

3. Rather than using useEffect, Component class has methods that will run based on where they are at in the lifecycle. 
    - componentDidMount() - runs when the component renders - essentially useEffect(---, [])
    - compontentDidUpdate() - when the component is updated - essentially useEffect(---, [depend1, depend2])
    - componentWillUnmount() - called right before compnent leaves the dom - essentially the cleanup from useEffect(() => {return => {...}}, [])


4. Context works the same way at the setup stage.
 - Create a store and define and export your context with some defualt keys
 - Then import your contect whereever you want to use it, and wrap the children in the constect provider, and pass in a value with your real data
 - To USE that context in your children:
    a. define static contextType = YourContext; (import it as well), can only use this once per class.
    b. then, in that component you can use this.context.users.

5. Error boundaries:
    - You can only use class based components to make an error boundary.
    - class ErrorBoundary extends Component {
            constructor() {
                super();
                this.state = { hasError: false };
            }

            componentDidCatch(error) {
                console.log(error);
                this.setState({ hasError: true });
            }

            render() {
                if (this.state.hasError) {
                return <p>Something went wrong!</p>;
                }
                return this.props.children;
            }
        }
    - what makes this an error boundary is the componentDidCatch() method. Any class component with that method
        technically makes the component an error boundary.
    - Wrap the error boundary component around the component that may throw the error. 
    - Render your error if you have one, if not, just render the children

/////////////////////////// Section 14 HTTP Requests //////////////////////////
1. You literally make a fetch request for API calls. Nothing special about it. 
2. Use state to how if you are loading, if you dont get anything back, or what you get back.
3. Wrap your requests in a try/catch block;
4. Right after your request resolves, throw an error if based on the http status code, or
    some other identifier. fetch doesnt consider http failures an error, so you have to throw
        your own if you are using fetch. 
5. if you are making a call right when a page loads, like this:
    -   useEffect(() => {
        fetchMoviesHandler();
        }, [fetchMoviesHandler]);
    - You need to wrap your fetchMoviesHandler in useCallback. Because it is a function that will get recreated
        on every render if you dont memoize it. This would cause an infite loop in your useEffect

////////////////////////////////// Custom Hooks ///////////////////////////////////////////
1. The point of custom hooks is to avoid code duplication. If you will be reusing a function through many components, make a custom hook!
    a. Normally you just make a function in a library or util folder, but what if you want that reusable function to use some state?
    b. 
2. Custom hooks are stored in their own file, and must start with "use" useCustomHook = () => {}
3. Just like any other function, your custom hooks can take in an argument. 
    - Really watch the depencies here. You may end up having to wrap a ton of stuff in useCallback();

/////////////////////////////////// 16 forms //////////////////////////////////////
1. Choose what is best for you. Giving feedback on blur, keystroke, or submission.
2. Max uses refs. Dont use refs. They are uncontrolled. 
3. Validation on the front end is only useful for the user experience. It is not security!
4. It is helpful to have some pre-defined classes you can add if an input is invalid. Set a classname to a variable
    and set the variable value based on the valid states. 
5. You are going to want to manage some "touched" state for inputs. You cant really judge something as valid or invalid if
    the end user has not touched that input yet. 
6. Falidating a form input is another great useCase for a custom hook. Rather than a reducer, pass a value and validator into a custom hook.
7. You can define your states in the hook, and have funcitons that update those states in the hook, then you can use those functions on your inputs,
    - The hook will update the states and then rerender.

/////////////////////////////// 17 Adding Http to Food order app ////////////////////////////////////
1. With Http there are always going to be some things you want to walk through:
    - Getting data on load
    - A Loading state
    - An Error State

/////////////////////////////////// 18 Redux! /////////////////////////////////////////////
1. Redux is a third party library. It is geared towards helping us manage app wide state:
    - Local State
    - Cross component
    - App wide state
2. Redux gives some advantages compared to the context API (though you can use both in the same app)
    - context is sort of complicated to set up and manage
    - Having multiple contexts is also complicated, it leads to a lot of nested providers. 
    - Managing one giant context is also a pain. 
    - Context is not a performant as Redux, React acknowledges that context is not made for data that frequently updates. 
3. Redux gives you one store for all of your app wide or cross component state. 
    - Compenents "subscribe" to the store, and are notified when data they use changes
    - Components NEVER manipulate the store. At least not directly. 
    - There is a reducer function that is responsible for mutating the store data. (not the same as useReducer)
    - Components trigger "actions" which are objects that tell the reducer what to do. The reducer then spits out a new state.
    - When the state changes the subscribing components update their UI to match the new state. 

4. Setting up redux:
    a. npm i redux - also install react-redux (redux is not react specific, so this makes it simplier to work redux into a react app)
    b. import redux
    c. create a store
        - const store = redux.createStore(counterReducer);
    d. create reducer (is called when action is passed, accepts old state, and action that was dispatched, always returns a new state)
        - const counterReducer = (state = {defaultValuesForState}, action) => {
            if(action.type === "something") {
                // do this stuff
                return {
                    updatedStateObject
                }
            }
            return state;
        }
    e. pass that reducer into the store you created
    f. Create a subcription to that store
        - const counterSubscriber = () => {
            const latestState = store.getState;
            return latestState;
        }

        store.subscribe(counterSubscriber)
    g. Now dispatch an action to trigger the reducer and a state update.
        - store.dispatch({type: "WHATEVER_ACTION", {actionObject}})

5. Redux is really used with react-redux and react/toolkit. These give you a few perks:
    - Provider component
    - useSelector() - to select a peice of state you want to use from your current redux reducer state. 
    - useDispatch() - gives you a function for your redux store (you can just name it dispatch)
6. Redux's reducer returns a peice of state. The state is an object and objects are reference values. Meaning
    it is easy to just change it, rather than return an entirely new object, but mutating it is a mistake. 
    - every action should return a new state object!!!!! (but for all that is holy use the spread operator lol)
7. if you are using createSlice from react toolkit, your methods can mutate state.
    - createSlice makes sure to return an immutible object in the backround. 
    - Slices must have a key named "initialState", this cannot be any name you want. 

/////////////////////////////////// 19 Advanced Redux! /////////////////////////////////////////////
1. All reducer functions must be sideEffect free and syncronous (they should be in the component, or we can write an action creator function)
2. Action Creators are available for us to run async code with redux. Or we could ignore redux and run this code in the component.
    - This gives you a choice, fat reducers, fat components, or fat actions. 
    - If you do your updating logic in the component, and store the finished state, you have a fat component
        - If your code is syncronous, use reducers for your data transformation code. 
        - If your code is async, do your data transformation in the component or an action. 
3. useEffect with redux.
    - If you want your backend to update with your frontend, set a useEffect to trigger when that peice of state changes. You can do this wherever with use selector!
4. Action Creators
    - you actually already use action creators already when you call a reducer method react-toolkit. 
    - You can create your own action creator called a "THunk"
    - A Thunk is a function delays an action until something else is finished then returns the function it was delaying.
    - Action creator functions will return a function that is async, in the function that is returned, you dispatch again to update state if need to. 
    - because this async code is happening in the action creator, rather than the dispatched reducers, this is okay. 
    - So you are dispatching something that is async, that will then dispatch your syncronous reducers, based on what happens in the async
        function you initially dispatched
    - Really what the do, is enable you to move the logic out of your component into your slices files.

/////////////////////////////////// Section 20 React Router /////////////////////////////////////////////
1. React router allows you to link to seperate urls within your website. It is the illusion of multiple pages, so it is technically still an Spread
    - This is made possible through client side routing
2. install react-router-dom2version
    - import router and wrap that around any component you want to be within a route, and pass a prop called "path".
    - create your main route components in a folder called "pages" this gives you sort of an MVC pattern with pages as your "views"
3. For links, get the <Link> component from react-router-dom rather than using a tags. This prevents the browser from
    actually sending a request and refreshing the page when you go to a route. 
    - NavLink is a special version of <Link> the lets you add an active class property for styling purposes.
4. 

Project:
1. I want a side-drawer nested nav
2. Deciding what logic you want on the backend and what you want on the front end is important with redux. 
    - Reducers have to be syncronous. So if you are storing something like a cart, and displaying it on the front end, 
        you have to determine if you want to compile all your items into the cart on the front end, or if you want to add
        and remove items from the cart on the backend, and then retrieve the cart from your backend. Basically, is your cart's source
        of truth what is stored in the state, or is what is in the state determined by what is on your backend. 
3. Use switch and exact to make nested urls (your urls sort of work like a file structure. Think "REST")
    - By default, react will render all routes that are "matching". if you have route /nick/is and /nick/is/cool, both content will render on /nick/is/cool
    - The switch component can be wrapped around your route components to make sure only one is active at a time. However, just like express, it will
        render the route that "matches" first.
    - The exact prop can be added to /nick/is, to make sure it doesnt render when /nick/is/cool is hit
4. Nested routes "path" prop must match the route they are nested inside. If you have a /tom route, nested in /nick/is, it will never show up. 
5.


- useState()
- useRef()
- React.Fragment
- ReactDom.createPortal()
- useEffect()
    - dependenicies
    - cleanup
- debounce something
- useReducer();
    - destructered variables from the state
- useContext(); - Custom context component
- useImperativeHandle();
- useForwardRef();
- React.memo();
- useCallback();
- useCustomHook() - use this for a custom http request hook that is sort of generic

- redux for app wide and cross component state
- useSelector(); <- sets up the component subcription to redux!!!
- useDispatch();

- redux toolkit
- configureStore()
- createSlice()

- react-router-dom
- useParams()

1. Make a compenent tree and get an idea of what components need to be resuable.
2. Decide where you will need to use context to avoid passing state through muliple compenents

Jobs
- Create a Job with a description and date. 
- Mark job as new, in progress on complete.
- send an invoice to the client for that Job.
- client should be able to make a payment.

Trans
- Use portal for trans detail
- use context for display state
- use reduce for search form
